[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Trade and Development Notebook",
    "section": "",
    "text": "Github\n  \n\n  \n  \nThis is the documentation website for learning on Trade and Development."
  },
  {
    "objectID": "documentation/index.html",
    "href": "documentation/index.html",
    "title": "Documentation",
    "section": "",
    "text": "Project\n\n\n\n\n\nTitle\n\n\n\n\n\n\nProjects overview\n\n\n\n\nMethodology\n\n\n\n\nCommodity price replacements\n\n\n\n\n\nNo matching items\n\n\n\n\nBackground\n\n\n\n\n\nTitle\n\n\n\n\n\n\nAspects of interest\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "documentation/2_method.html",
    "href": "documentation/2_method.html",
    "title": "Methodology",
    "section": "",
    "text": "Resources: UNCTAD Commodity Price Index\nCPI: commodity price index: an index average (weighted) of selected commodity prices, which may be based on spot or future prices. It tracks a basket of commodities to measure their performance.\nCategories:\n\nenergy (coal, crude oil, ethanol, gas oil, gasoline, nature gas)\nmetals\n\nbase metals (lead, zinc, nickel, copper)\nprecious metals (gold, silver, platinum, palladium)\n\nagriculture\n\ngrains (corn, oats, rice, soybeans, wheat)\nsofts (coffee, cocoa, sugar, butter, cotton, milk)\nlivestock (hogs, live cattle, pork bellies, feeder cattle)\n\n\n\nWeights\nWeights determine how much importance each commodity have on the overall index\nDerived from UNSD Comtrade database.\n\n\nPrices\nDerived from a representative sample of monthly, weekly or daily spot-market quotations, in USD\nMany are published, but not all\n\\[L_{t,0}= \\frac{\\sum^n_{i=1} p_{i,t} q_{i,0}}{\\sum^n_{i=1} p_{i,0} q_{i,0}} = \\sum^n_{i=1} \\frac{p_i^t}{p_i^0} s_i^0\\]\n\n\\(s_i^0\\): weight of commodity item i\n\\(p_i^t\\): price in period t\n\\(q_i^0\\): quantity of commodity item i in the base period"
  },
  {
    "objectID": "internal/information.html",
    "href": "internal/information.html",
    "title": "CPI",
    "section": "",
    "text": "Language\nread Economist\n\n\nNetworking\npeople in this section, after having the email account\n\ndiana\ndaniel\n\nother people?"
  },
  {
    "objectID": "documentation/1_project_overview.html",
    "href": "documentation/1_project_overview.html",
    "title": "Projects overview",
    "section": "",
    "text": "Commodity dependence (over 60% of a country’s merchandise export revenue comes from these raw materials) hinders growth and development. This is due to the exposure to volatile commodity markets and global shocks such as Covid-19 and Ukraine War. If a country relies on a single commodity, the risk is worse.\n12% of advanced economies (such as Australia and Norway) are on the list, while 74% were some of the least developed countries.\nComodity price rose sharply during Covid-19 pandemic\nAction:\n\ndiversification towards sectors with high potential to create jobs and boost income\nalign education to the skills needed\ndiversify along low-emission paths"
  },
  {
    "objectID": "documentation/1_project_overview.html#motivation",
    "href": "documentation/1_project_overview.html#motivation",
    "title": "Projects overview",
    "section": "Motivation",
    "text": "Motivation\nStatistics on monthly and annual development of commodity prices ad CPI (UNCTAD CPI) are released. This is divided by commodity groups. Monthly update is made 2 months later; annual update made in February for preliminary version and October for final version."
  },
  {
    "objectID": "internal/internal_method.html",
    "href": "internal/internal_method.html",
    "title": "Internal methodology",
    "section": "",
    "text": "UNCTADstat target tables\n\nmonthly price from Jan 1995 to month m-1\nmonthly price indices from Jan 1995 to month m-1\nannual price from 1995 to year y-1\nannual price indices from 1995 to year y-1\n\nData collection methods\n\nemail from figures or data sheets\ndownload from websites\nthrough web APIs\nautomatically update Excels with API\ncopy figures from PDFs"
  },
  {
    "objectID": "documentation/index.html#project",
    "href": "documentation/index.html#project",
    "title": "Documentation",
    "section": "",
    "text": "Title\n\n\n\n\n\n\nProjects overview\n\n\n\n\nMethodology\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "documentation/index.html#background",
    "href": "documentation/index.html#background",
    "title": "Documentation",
    "section": "Background",
    "text": "Background\n\n\n\n\n\nTitle\n\n\n\n\n\n\nThe UN system\n\n\n\n\nSoft skills\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "documentation/4_softskills.html",
    "href": "documentation/4_softskills.html",
    "title": "Soft skills",
    "section": "",
    "text": "Ways to speak\nTerminology to use"
  },
  {
    "objectID": "documentation/1_project_overview.html#background",
    "href": "documentation/1_project_overview.html#background",
    "title": "Projects overview",
    "section": "",
    "text": "Commodity dependence (over 60% of a country’s merchandise export revenue comes from these raw materials) hinders growth and development. This is due to the exposure to volatile commodity markets and global shocks such as Covid-19 and Ukraine War. If a country relies on a single commodity, the risk is worse.\n12% of advanced economies (such as Australia and Norway) are on the list, while 74% were some of the least developed countries.\nComodity price rose sharply during Covid-19 pandemic\nAction:\n\ndiversification towards sectors with high potential to create jobs and boost income\nalign education to the skills needed\ndiversify along low-emission paths"
  },
  {
    "objectID": "internal/internal_method.html#data-collection-and-validation-collect_v2-0.r",
    "href": "internal/internal_method.html#data-collection-and-validation-collect_v2-0.r",
    "title": "Internal methodology",
    "section": "Data collection and validation collect_v2-0.R",
    "text": "Data collection and validation collect_v2-0.R\nHarvesters/*: these are functions that download and put the data as csv\n\nPseudo: load data from S folder\nHarvester: load via API, e.g. 5110 from World Bank\n\nDepends on functions in\n\nreview-collected_v4.R\nintegrate.R\ncheck-multiple.R"
  },
  {
    "objectID": "internal/internal_method.html#prelim---analysis",
    "href": "internal/internal_method.html#prelim---analysis",
    "title": "Internal methodology",
    "section": "Prelim - analysis",
    "text": "Prelim - analysis\n\nData coverage, CPS_Dataediting_v2.R\nDepends on functions in\n\nmis-units_v2.R, if the price series is completely missing, by comparing with the updated.csv\nmis-ob_v2.R, partially missing\nbenchmark.R, Imputation for missing\ncheck-multiple.R\n\nproduce input-prices.csv\n\n\nCheck produced price checks_prices_v2\nDepends on functions in\n\nchk.revisions: identify revisions and order by degree\nchk.graph: check with visualization"
  },
  {
    "objectID": "documentation/5_metals.html",
    "href": "documentation/5_metals.html",
    "title": "World Bank replacements",
    "section": "",
    "text": "Motivation: replace the commodity products from their original sources by equivalent items from World Bank (5110).\nAbbreviations:"
  },
  {
    "objectID": "documentation/5_metals.html#metals",
    "href": "documentation/5_metals.html#metals",
    "title": "World Bank replacements",
    "section": "Metals",
    "text": "Metals\nThere are 16 unique series code (for metals) from MB, and they match the ones in meta. This is not surprising.\nNow the task is to match the series in WB with the existing ones. WB series does not have series code. Some are identical; some differ by a scale (possibly due to exchange rate?); some do not exist in WB data.\n\n\n\n\n\n\n\n\n\n\nName\nCode\nColumn in WB data\nAlternative source\nComment\n\n\n\n\nGold\n\n\nMB\nOK\n\n\nCopper\n\n\nMB\n260300.01 code has same trend but different values\n\n\nAluminium\n\n\nMB\nOK\n\n\nSilver\n\n\nMB\nOK, differ by 100 times\n\n\nNickel\n\n\nMB\nOK\n\n\nZinc\n\n\n\nOK\n\n\nPlatinum\n\nMB\n\nOK\n\n\nLead\n\n\nMB\nOK\n\n\nTin\n\n\nMB\nOK\n\n\nManganese\n\n\nMB\nNot available in WB\n\n\nIron\n260100.02, 03\n-\nTR\nTR Only available from 2010.9 for both. WB uses code 02, can directly replace."
  },
  {
    "objectID": "documentation/5_metals.html#summary",
    "href": "documentation/5_metals.html#summary",
    "title": "World Bank replacements",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\n\n\n\n\n\nName\nCode\nColumn in WB data\nAlternative source\nComment\n\n\n\n\nGold\n\n\nMB\nOK\n\n\nCopper\n\n\nMB\n260300.01 code has same trend but different values\n\n\nAluminium\n\n\nMB\nOK\n\n\nSilver\n\n\nMB\nOK, differ by 100 times\n\n\nNickel\n\n\nMB\nOK\n\n\nZinc\n\n\n\nOK\n\n\nPlatinum\n\nMB\n\nOK\n\n\nLead\n\n\nMB\nOK\n\n\nTin\n\n\nMB\nOK\n\n\nManganese\n\n\nMB\nNot available in WB\n\n\nIron\n260100.02, 03\n-\nTR\nTR Only available from 2010.9 for both. WB uses code 02, can directly replace."
  },
  {
    "objectID": "documentation/3_replacements.html",
    "href": "documentation/3_replacements.html",
    "title": "World Bank replacements",
    "section": "",
    "text": "Motivation: replace the commodity products from their original sources by equivalent items from World Bank (5110).\nAbbreviations:"
  },
  {
    "objectID": "documentation/3_replacements.html#summary",
    "href": "documentation/3_replacements.html#summary",
    "title": "World Bank replacements",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\n\n\n\n\n\nName\nCode\nColumn in WB data\nAlternative source\nComment\n\n\n\n\nGold\n\n\nMB\nOK\n\n\nCopper\n\n\nMB\n260300.01 code has same trend but different values\n\n\nAluminium\n\n\nMB\nOK\n\n\nSilver\n\n\nMB\nOK, differ by 100 times\n\n\nNickel\n\n\nMB\nOK\n\n\nZinc\n\n\n\nOK\n\n\nPlatinum\n\nMB\n\nOK\n\n\nLead\n\n\nMB\nOK\n\n\nTin\n\n\nMB\nOK\n\n\nManganese\n\n\nMB\nNot available in WB\n\n\nIron\n260100.02, 03\n-\nTR\nTR Only available from 2010.9 for both. WB uses code 02, can directly replace."
  },
  {
    "objectID": "documentation/x_interests.html",
    "href": "documentation/x_interests.html",
    "title": "Aspects of interest",
    "section": "",
    "text": "A few projects that could be interesting to learn more about. Need to be an overlap between skills to develop and data available."
  },
  {
    "objectID": "documentation/x_interests.html#commodity-prices",
    "href": "documentation/x_interests.html#commodity-prices",
    "title": "Aspects of interest",
    "section": "Commodity prices",
    "text": "Commodity prices\nMonthly updated commodity prices using sources from World Bank, IMF.\nTo learn:\n\nNowcasting?\n\n\n\n\n\n\n\nSkills and impact\n\n\n\n\n\n\nResources\n\nInternational commodity bodies\nCommodities and development report 2023\n\n\nNowcasting\nTwo papers:\n\nEconomic Nowcasting with LSTM ANN\nBenchmarking econometric and machine learning methodologies in nowcasting\n\nDashboard\nDynamic factor models nowcastDFM"
  },
  {
    "objectID": "documentation/x_interests.html#services",
    "href": "documentation/x_interests.html#services",
    "title": "Aspects of interest",
    "section": "Services",
    "text": "Services\n\n\n\n\n\n\nSkills and impact"
  },
  {
    "objectID": "documentation/x_interests.html#datahub-api",
    "href": "documentation/x_interests.html#datahub-api",
    "title": "Aspects of interest",
    "section": "DataHub API",
    "text": "DataHub API"
  },
  {
    "objectID": "documentation/x_interests.html#unctad-llm",
    "href": "documentation/x_interests.html#unctad-llm",
    "title": "Aspects of interest",
    "section": "UNCTAD LLM",
    "text": "UNCTAD LLM\nUNCTAD internal system for RAG (retrieval-augmented generation)\nTo learn:\n\nLLM in general\nHow the app is set up\n\n\n\n\n\n\n\nSkills and impact"
  },
  {
    "objectID": "documentation/x_interests.html#data-hub-api",
    "href": "documentation/x_interests.html#data-hub-api",
    "title": "Aspects of interest",
    "section": "Data Hub API",
    "text": "Data Hub API\nThe data dashboard"
  },
  {
    "objectID": "documentation/x_interests.html#visualization-palette-sdg",
    "href": "documentation/x_interests.html#visualization-palette-sdg",
    "title": "Aspects of interest",
    "section": "Visualization palette (SDG)",
    "text": "Visualization palette (SDG)\nInspired by UNCTAD and UNHCR. (UNHCR has a few interesting packages!)"
  },
  {
    "objectID": "documents/diagram.html",
    "href": "documents/diagram.html",
    "title": "diagram",
    "section": "",
    "text": "flowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]"
  },
  {
    "objectID": "diagram.html",
    "href": "diagram.html",
    "title": "diagram",
    "section": "",
    "text": "flowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]"
  },
  {
    "objectID": "documents/doc_price_index.html",
    "href": "documents/doc_price_index.html",
    "title": "Documentation for the price index computation",
    "section": "",
    "text": "library(ggplot2)\nlibrary(openxlsx)\nlibrary(jsonlite)\nlibrary(httr)\nlibrary(readxl)\nlibrary(zoo)\nlibrary(dplyr)\n\n# source the utility functions\nsource('~/Documents/GitHub/un-commodity-prices/dev_prices/util.R')\n\n# set data paths\nread_path &lt;- '~/Documents/GitHub/un-commodity-prices/data-raw/'\ndir_metadata &lt;- 'metadata/'\ndir_datasource_2024 &lt;- 'datasource_2024/'\ndir_datasource_2025 &lt;- 'datasource_2025/'\n\n# write_path &lt;- '~/Documents/GitHub/unctad-int/dev_prices/results/'"
  },
  {
    "objectID": "documents/doc_price_index.html#metadata",
    "href": "documents/doc_price_index.html#metadata",
    "title": "Documentation for the price index computation",
    "section": "Metadata",
    "text": "Metadata\nFirst load the metadata that contains information for extracting the relevant columns from the international sources.\nThe content of metadata:\n\nindex_sort: 4-digits ID used to compute price index\nseries_id: 8 digits ID for specific commodity\ndescription_long: detailed description of commodity for 2024 sources\nunit_2024: unit used as in the description (2024 sources). This might not be the same as in the 2025 sources. add a footnote\ndata_source_2024_code, data_source_2024: code and description for data sources used in 2024 version. For example, 5110 is World Bank Commodity markets.\ndata_source_2025_code, data_source_2025: code and description for data sources used in 2025 version.\nlabel_display: commodity name, used for graphics\nlabel_source_2025: commodity name as in their 2025 data sources. It is important to match the correct names to the latest data. this step needs to be emphasized\ncheck_two_sources: indicator of whether the sources are switched from 2024 to 2025. If yes, then quality check graphics will be produced.\nkeep: indicator of whether we keep the series in the price index computation.\nwithin_product_weight: weight for products that share the same index_sort. For now only applies to coffee and oil. more info see index computation\n\n\nmetadata &lt;- read.xlsx(paste0(read_path, \n                             dir_metadata, \n                             'commodity_metadata.xlsx'), \n                      sheet = 'commodity')\nhead(metadata, 3)\n\n  index_sort series_id description_short\n1       1005 020100.01              beef\n2       1010 030212.01       fish_salmon\n3       1011 030613.01       shrimps_mex\n                                            description_long  unit_2024\n1   Beef, Australia/New Zealand, frozen, CIF US ports ($/kg) usd_per_kg\n2 Salmon, fresh, fish-farm bred, export price, Norway ($/kg) usd_per_kg\n3   Shrimps, brown, no. 1, shell-on, headless, Mexico ($/kg) usd_per_kg\n  data_source_2024_code               data_source_2024 data_source_2025_code\n1                  5110 World Bank - Commodity-markets                  5110\n2                  7801              Statistics Norway                  2311\n3                  5110 World Bank - Commodity-markets                  5110\n                data_source_2025     label_display label_source_2025\n1 World Bank - Commodity-markets              Beef           Beef.**\n2 IMF - Primary Commodity Prices     Fish (Salmon)             PSALM\n3 World Bank - Commodity-markets Shrimps (Mexican)  Shrimps..Mexican\n  check_two_sources keep within_product_weight\n1              &lt;NA&gt;  yes                     1\n2               yes  yes                     1\n3              &lt;NA&gt;  yes                     1"
  },
  {
    "objectID": "documents/doc_price_index.html#data-collection",
    "href": "documents/doc_price_index.html#data-collection",
    "title": "Documentation for the price index computation",
    "section": "Data collection",
    "text": "Data collection\n\nWorld Bank\nNote: data file needs to be replaced by API link!\nWe load the data first, then do some processing: convert the prices into numeric values.\n\n# load the raw data (to be replaced by API)\nwb_raw &lt;- read.xlsx(paste0(read_path, \n                           dir_datasource_2025, \n                           \"CMO-Historical-Data-Monthly.xlsx\"), \n                          sheet = \"Monthly Prices\", startRow = 5)\n\n# print the column names and location\nwb_var &lt;- get_info_wb(wb_raw)\n\n# make the values numeric\nwb &lt;- process_data_wb(data = wb_raw)\n\nNow select the relevant commodities, as defined by metadata. We choose the ones where data_source_2025_code == 5110 (world bank).\nSome of the labels might have special characters, hence we replace them.\n\nwb_info &lt;- filter(metadata, data_source_2025_code == 5110 & !is.na(label_source_2025))\n# double check if this is what we need\n\n# process the labels to remove the special characters\nwb_labels &lt;- wb_info$label_source_2025\nwb_labels &lt;- gsub(',', '.', wb_labels) # substitute the commas\nwb_labels &lt;- gsub('\\\\*', '.', wb_labels) # substitute the star (careful since it's wildcard)\nwb_labels &lt;- gsub('%', '.', wb_labels) # substitute the commas\nwb_labels\n\n [1] \"Beef...\"                 \"Shrimps..Mexican\"       \n [3] \"Banana..US\"              \"Coffee..Arabica\"        \n [5] \"Coffee..Robusta\"         \"Tea..Mombasa\"           \n [7] \"Wheat..US.HRW\"           \"Maize\"                  \n [9] \"Rice..Thai.5.\"           \"Soybeans\"               \n[11] \"Soybean.meal\"            \"Cotton..A.Index\"        \n[13] \"Soybean.oil\"             \"Groundnut.oil...\"       \n[15] \"Palm.oil\"                \"Sunflower.oil\"          \n[17] \"Coconut.oil\"             \"Palm.kernel.oil\"        \n[19] \"Sugar..world\"            \"Cocoa\"                  \n[21] \"Fish.meal\"               \"Tobacco..US.import.u.v.\"\n[23] \"Phosphate.rock\"          \"Iron.ore..cfr.spot\"     \n[25] \"Copper\"                  \"Nickel\"                 \n[27] \"Aluminum\"                \"Lead\"                   \n[29] \"Zinc\"                    \"Tin\"                    \n[31] \"Silver\"                  \"Coal..Australian\"       \n[33] \"Crude.oil..Brent\"        \"Crude.oil..Dubai\"       \n[35] \"Natural.gas.index\"       \"Rubber..TSR20...\"       \n[37] \"Rubber..RSS3\"            \"Logs..Cameroon\"         \n[39] \"Sawnwood..Malaysian\"     \"Plywood\"                \n[41] \"Gold\"                    \"Platinum\"               \n\n\nAbove are the variable names that correspond to the world bank data file. Now we carry out the selection: keep year, period, time, datetime and the commodity labels.\nSince some labels are long, we set new names.\n\n# select based on names\nwb_narrow &lt;- select(wb, year, period, time, datetime, all_of(wb_labels))\n\n# reset the colnames\ncolnames(wb_narrow)[5:ncol(wb_narrow)]\n\n [1] \"Beef...\"                 \"Shrimps..Mexican\"       \n [3] \"Banana..US\"              \"Coffee..Arabica\"        \n [5] \"Coffee..Robusta\"         \"Tea..Mombasa\"           \n [7] \"Wheat..US.HRW\"           \"Maize\"                  \n [9] \"Rice..Thai.5.\"           \"Soybeans\"               \n[11] \"Soybean.meal\"            \"Cotton..A.Index\"        \n[13] \"Soybean.oil\"             \"Groundnut.oil...\"       \n[15] \"Palm.oil\"                \"Sunflower.oil\"          \n[17] \"Coconut.oil\"             \"Palm.kernel.oil\"        \n[19] \"Sugar..world\"            \"Cocoa\"                  \n[21] \"Fish.meal\"               \"Tobacco..US.import.u.v.\"\n[23] \"Phosphate.rock\"          \"Iron.ore..cfr.spot\"     \n[25] \"Copper\"                  \"Nickel\"                 \n[27] \"Aluminum\"                \"Lead\"                   \n[29] \"Zinc\"                    \"Tin\"                    \n[31] \"Silver\"                  \"Coal..Australian\"       \n[33] \"Crude.oil..Brent\"        \"Crude.oil..Dubai\"       \n[35] \"Natural.gas.index\"       \"Rubber..TSR20...\"       \n[37] \"Rubber..RSS3\"            \"Logs..Cameroon\"         \n[39] \"Sawnwood..Malaysian\"     \"Plywood\"                \n[41] \"Gold\"                    \"Platinum\"               \n\ncolnames(wb_narrow)[5:ncol(wb_narrow)] &lt;- wb_info$description_short\n\n\n\nIMF\nCarry out similar tasks for the IMF data.\n\nimf_raw &lt;- read_excel(paste0(read_path, \n                             dir_datasource_2025, \n                             \"imf.xls\"))\n\nNew names:\n• `POILAPSP` -&gt; `POILAPSP...17`\n• `POILAPSP` -&gt; `POILAPSP...45`\n• `` -&gt; `...89`\n• `` -&gt; `...90`\n• `` -&gt; `...91`\n• `` -&gt; `...92`\n• `` -&gt; `...93`\n• `` -&gt; `...94`\n• `` -&gt; `...95`\n\n# check variables\nimf_var &lt;- get_info_imf(imf_raw)\n# View(imf_var)\n\n# process data, conver to numerics\nimf &lt;- process_data_imf(imf_raw)\n\nThe last few columns are a bit messy, we manually set the name for Manganese. Please double check if this is what you need!\n\n# need to fill in Manganese\nimf &lt;- fill_imf_name(data = imf, \n                     keyword = 'Mang', \n                     col_to_fill = '...92', \n                     fill_name = 'PMANG')\n\nSelect the variables defined in metadata: where data_source_2025_code == 2311.\n\n# select \nimf_info &lt;- filter(metadata, data_source_2025_code == 2311 & \n                     !is.na(label_source_2025) & keep == 'yes')\nimf_info\n\n  index_sort series_id description_short\n1       1010 030212.01       fish_salmon\n2       3002 260200.02      manganese_99\n3       2006 410100.01             hides\n4       2004 510100.03         wool_fine\n                                                                   description_long\n1                        Salmon, fresh, fish-farm bred, export price, Norway ($/kg)\n2     Manganese 99.7% electrolytic manganese flake, free market, in warehouse ($/t)\n3 Cattle hides, US Chicago packer's heavy native steers, FOB shipping point (¢/lb.)\n4                         Fine wool, 19 Micron, AWEX auction price, Australia ($/t)\n      unit_2024 data_source_2024_code                 data_source_2024\n1    usd_per_kg                  7801                Statistics Norway\n2 usd_per_tonne                  6801           Metal Bulletin Limited\n3   cent_per_lb                  2311   IMF - Primary Commodity Prices\n4 usd_per_tonne                  8001 Australian Wool Innovation (AWI)\n  data_source_2025_code               data_source_2025  label_display\n1                  2311 IMF - Primary Commodity Prices  Fish (Salmon)\n2                  2311 IMF - Primary Commodity Prices Manganese 99.7\n3                  2311 IMF - Primary Commodity Prices          Hides\n4                  2311 IMF - Primary Commodity Prices    Wool (fine)\n  label_source_2025 check_two_sources keep within_product_weight\n1             PSALM               yes  yes                     1\n2             PMANG               yes  yes                     1\n3             PHIDE               yes  yes                     1\n4            PWOOLF               yes  yes                     1\n\n# select relevant columns\nimf_narrow &lt;- select(imf, year, datetime, all_of(imf_info$label_source_2025))\n\n# reset name \ncolnames(imf_narrow)[3:ncol(imf_narrow)]\n\n[1] \"PSALM\"  \"PMANG\"  \"PHIDE\"  \"PWOOLF\"\n\ncolnames(imf_narrow)[3:ncol(imf_narrow)] &lt;- imf_info$description_short"
  },
  {
    "objectID": "documents/doc_price_index.html#fao",
    "href": "documents/doc_price_index.html#fao",
    "title": "Documentation for the price index computation",
    "section": "FAO",
    "text": "FAO\nThe mechanism is slightly different for FAO. First grab the name (Jute), then query it based on uuid.\n\n# first get metadata\nfpma_api &lt;- GET(\"https://fpma.fao.org/giews/v4/price_module/api/v1/FpmaSerieInternational/\")\nfpma_raw &lt;- fromJSON(rawToChar(fpma_api$content))\n# str(fpma_raw)\nfpma_data &lt;- fpma_raw$results\n\n# get information for jute\n# do the same for other commodity if needed\njute_info &lt;- filter(fpma_data, grepl('Jute', commodity_name))\njute_info\n\n                                  uuid iso3_country_code         country_name\n1 5a272e65-e437-41c2-bcb0-f229dc14f47b               IPS INTERNATIONAL PRICES\n                      periodicity market market_name market_info market_type\n1 monthly, 2024-04-01, 2004-01-01   1750  Bangladesh                  Export\n  admin_unit admin_unit2 commodity\n1                             2711\n                                                                 commodity_name\n1 Jute BWD (f.o.b. Mongla, at sight)/from 2006 Jute BTD (f.o.b Bangladesh Port)\n  commodity_info commodity_image commodity_code commodity_start_date\n1                             NA      CMM530300                    1\n  alternative_code alternative_name source\n1                                      323\n                                                                  source_name\n1 Bangladesh Jute Mills Corporation/The Public Ledger/Wilhelm G. Clasen (WGC)\n  source_url price_type_id price_type currency measure_unit measure_unit_label\n1                       11     EXPORT      USD         3555              tonne\n  conversion_factor\n1             0.001\n\n\nWe use the uuid to get the jute data. Double check the period where the data is available (it is only from 2004.1 to 2024.1).\n\njute_raw &lt;- GET(paste0(\"https://fpma.fao.org/giews/v4/price_module/api/v1/FpmaSeriePrice/\",jute_info$uuid,\"/\"))\njute &lt;- fromJSON(rawToChar(jute_raw$content))\n\n# only from 2004.1 to 2024.1\nhead(jute$datapoints)\n\n       id price_value price_value_real price_value_dollar conversion_factor\n1 5070349         840               NA                840             0.001\n2 5070348         780               NA                780             0.001\n3 5070347         820               NA                820             0.001\n4 5070346         850               NA                850             0.001\n5 5070345         700               NA                700             0.001\n6 5070344         670               NA                670             0.001\n        date periodicity\n1 2024-04-01     monthly\n2 2024-03-01     monthly\n3 2024-02-01     monthly\n4 2024-01-01     monthly\n5 2023-12-01     monthly\n6 2023-11-01     monthly\n\ntail(jute$datapoints)\n\n        id price_value price_value_real price_value_dollar conversion_factor\n239 612511         290               NA                290             0.001\n240 612510         290               NA                290             0.001\n241 612509         290               NA                290             0.001\n242 612508         245               NA                245             0.001\n243 612507         245               NA                245             0.001\n244 612506         230               NA                230             0.001\n          date periodicity\n239 2004-06-01     monthly\n240 2004-05-01     monthly\n241 2004-04-01     monthly\n242 2004-03-01     monthly\n243 2004-02-01     monthly\n244 2004-01-01     monthly\n\n\nConvert to proper format to prepare for merging.\n\njute &lt;- data.frame(jute$datapoints[, c('date', 'price_value_dollar')])\ncolnames(jute)[1] &lt;- 'datetime'\ncolnames(jute)[2] &lt;- 'jute'\njute$datetime &lt;- as.Date(jute$datetime)"
  },
  {
    "objectID": "documents/doc_price_index.html#merge",
    "href": "documents/doc_price_index.html#merge",
    "title": "Documentation for the price index computation",
    "section": "Merge",
    "text": "Merge\nWe carry out a left_join on the three data sets. The keywords that we join by are the date times.\n\ndcommodity &lt;- left_join(wb_narrow, imf_narrow) |&gt; \n  left_join(jute)\n\nJoining with `by = join_by(year, datetime)`\nJoining with `by = join_by(datetime)`\n\ncolnames(dcommodity)\n\n [1] \"year\"             \"period\"           \"time\"             \"datetime\"        \n [5] \"beef\"             \"shrimps_mex\"      \"banana_us\"        \"coffee_arabica\"  \n [9] \"coffee_robusta\"   \"tea_mombasa\"      \"wheat_us\"         \"maize\"           \n[13] \"rice\"             \"soybeans\"         \"soybean_meal\"     \"cotton\"          \n[17] \"soybean_oil\"      \"groundnut_oil\"    \"palm_oil\"         \"sunflower_oil\"   \n[21] \"coconut_oil\"      \"palmkernel_oil\"   \"sugar\"            \"cocoa\"           \n[25] \"fish_meal\"        \"tobacco\"          \"phosphate_rock\"   \"iron_ore\"        \n[29] \"copper\"           \"nickel\"           \"aluminium\"        \"lead\"            \n[33] \"zinc\"             \"tin\"              \"silver\"           \"coal\"            \n[37] \"crude_oil_brent\"  \"crude_oil_dubai\"  \"naturalgas_index\" \"rubber_tsr20\"    \n[41] \"rubber_rss3\"      \"logs_cameroon\"    \"sawnwood\"         \"plywood\"         \n[45] \"gold\"             \"platinum\"         \"fish_salmon\"      \"manganese_99\"    \n[49] \"hides\"            \"wool_fine\"        \"jute\""
  },
  {
    "objectID": "documents/doc_price_index.html#weights",
    "href": "documents/doc_price_index.html#weights",
    "title": "Documentation for the price index computation",
    "section": "Weights",
    "text": "Weights\n\nweights &lt;- read.xlsx(paste0(read_path, dir_metadata, 'weights.xlsx'))\nhead(weights)\n\n  index_sort    group subgroup index_description           w           s\n1       1001 ALL FOOD     FOOD             Wheat  2206573845 0.001966377\n2       1002 ALL FOOD     FOOD             Maize 10035445721 0.008943037\n3       1003 ALL FOOD     FOOD              Rice 12086634062 0.010770943\n4       1004 ALL FOOD     FOOD             Sugar 18309075031 0.016316040\n5       1005 ALL FOOD     FOOD       Bovine meat 10935950196 0.009745517\n6       1006 ALL FOOD     FOOD           Bananas  7314470514 0.006518253\n  available\n1       yes\n2       yes\n3       yes\n4       yes\n5       yes\n6       yes\n\n\nThe content of weight data:\n\nindex_sort: 4-digits ID used to compute price index. Link to metadata.\ngroup: first level of grouping of commodity\nsubgroup: second level of grouping\nindex_description: description of the index. This does not necessarily link to metadata; however it is indicative to the product used.\nw and s: numeric values used to compute the weighted sum of the index. s sum up to 1, while w for each product divided by the total sum of w equals to s (hence equivalent).\navailable: indicator of whether this product is available in the data source in 2025.\n\n\n# shares sum up to 1\nweights$s |&gt; sum()\n\n[1] 1"
  },
  {
    "objectID": "documents/doc_price_index.html#combine-weight-with-metadata",
    "href": "documents/doc_price_index.html#combine-weight-with-metadata",
    "title": "Documentation for the price index computation",
    "section": "Combine weight with metadata",
    "text": "Combine weight with metadata\nThis step produces a table that provides information that links price series to their weights.\n\nm &lt;- dplyr::filter(metadata, keep == 'yes') |&gt; \n  select(index_sort, \n         series_id, \n         description_short, \n         within_product_weight)\n\nm |&gt; head()\n\n  index_sort series_id description_short within_product_weight\n1       1005 020100.01              beef                   1.0\n2       1010 030212.01       fish_salmon                   1.0\n3       1011 030613.01       shrimps_mex                   1.0\n4       1006 080300.01         banana_us                   1.0\n5       1101 090100.03    coffee_arabica                   0.4\n6       1101 090100.05    coffee_robusta                   0.6\n\n\n\nws &lt;- dplyr::filter(weights, available == 'yes') |&gt; \n  select(index_sort, \n         group, \n         subgroup,\n         index_description,\n         s)\n\nws |&gt; head()\n\n  index_sort    group subgroup index_description           s\n1       1001 ALL FOOD     FOOD             Wheat 0.001966377\n2       1002 ALL FOOD     FOOD             Maize 0.008943037\n3       1003 ALL FOOD     FOOD              Rice 0.010770943\n4       1004 ALL FOOD     FOOD             Sugar 0.016316040\n5       1005 ALL FOOD     FOOD       Bovine meat 0.009745517\n6       1006 ALL FOOD     FOOD           Bananas 0.006518253"
  },
  {
    "objectID": "documents/doc_price_index.html#within-product-weights",
    "href": "documents/doc_price_index.html#within-product-weights",
    "title": "Documentation for the price index computation",
    "section": "Within product weights",
    "text": "Within product weights\nDouble check how many rows there are. They might be different.\n\nc(nrow(m), nrow(ws))\n\n[1] 47 44\n\n\nThe within-product weight is defined in the metadata. For most products this value is 1, exceptions apply to two products:\n\nindex sort code 1101: Coffee Arabica (090100.03) and Robusta (090100.05) takes up 40% and 60%\nindex sort code 4201: Crude oil - Brent (270900.01) and Dubai (270900.02) takes up 50% each\n\nSpecial case:\n\nindex sort code 2010: Rubber RSS3 (400100.02) and TSR20 (400100.01). We use RSS3 as it is complete, while TSR20 is only available from 1999 in World Bank Data. The within-product weight becomes 1 and 0 respectively.\n\n\n# only 1101 (coffee), 2010 (rubber) 4201 (crude oil) have more frequency\ntable(m$index_sort) |&gt; sort()\n\n\n1001 1002 1003 1004 1005 1006 1008 1010 1011 1102 1103 1201 1202 1203 1204 1206 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1207 1208 2001 2002 2003 2004 2005 2006 2007 2008 2009 3001 3002 3003 3004 3005 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n3006 3007 3008 3009 3101 3102 3103 4001 4101 1101 2010 4201 \n   1    1    1    1    1    1    1    1    1    2    2    2 \n\nM &lt;- full_join(m, ws, by = 'index_sort')\nhead(M)\n\n  index_sort series_id description_short within_product_weight    group\n1       1005 020100.01              beef                   1.0 ALL FOOD\n2       1010 030212.01       fish_salmon                   1.0 ALL FOOD\n3       1011 030613.01       shrimps_mex                   1.0 ALL FOOD\n4       1006 080300.01         banana_us                   1.0 ALL FOOD\n5       1101 090100.03    coffee_arabica                   0.4 ALL FOOD\n6       1101 090100.05    coffee_robusta                   0.6 ALL FOOD\n            subgroup index_description           s\n1               FOOD       Bovine meat 0.009745517\n2               FOOD              Fish 0.002242046\n3               FOOD       Crustaceans 0.010791602\n4               FOOD           Bananas 0.006518253\n5 TROPICAL BEVERAGES            Coffee 0.014538625\n6 TROPICAL BEVERAGES            Coffee 0.014538625"
  },
  {
    "objectID": "documents/doc_price_index.html#compute-index",
    "href": "documents/doc_price_index.html#compute-index",
    "title": "Documentation for the price index computation",
    "section": "Compute index",
    "text": "Compute index\nNow we compute the index. First need to base the prices at 2015 as 100: compute the average price for each product for 2015, and merge it back to M matrix. These 2015 basis values are used as the denominator when we compute the index.\n\nbasis_2015 &lt;- filter(dcommodity, year == 2015) |&gt; \n  select(-c(year, period, time, datetime)) |&gt; \n  apply(MARGIN = 2, mean) \nbasis_2015 &lt;- data.frame(basis_2015)\nbasis_2015$description_short &lt;- rownames(basis_2015)\nhead(basis_2015)\n\n               basis_2015 description_short\nbeef            4.5591542              beef\nshrimps_mex    13.2152272       shrimps_mex\nbanana_us       0.9569142         banana_us\ncoffee_arabica  3.5260692    coffee_arabica\ncoffee_robusta  1.9411679    coffee_robusta\ntea_mombasa     2.9646806       tea_mombasa\n\n# merge it to M\nM2 &lt;- left_join(M, basis_2015, by = 'description_short')\n\nNow we select the relevant columns (by dropping year, period, time, datetime).\n\n# select only relevant columns\ndcwide &lt;- select(dcommodity, -c(year, period, time, datetime))\n\n# still want to keep track of the time information\nrownames(dcwide) &lt;- dcommodity$datetime\n\nDivide the original values by the 2015 basis, then multiply by their weights. For the special cases (coffee, crude oil), the within_product_weight is used to combine the weighted sum of the two sub-products.\n\nTest out for one series\nLet us use beef as an example.\n\nproducts &lt;- M2$description_short\nproducts[1]\n\n\nbeef &lt;- compute_weighted_price(d_price = dcwide,\n                               d_weight = M2,\n                               product = products[1])\nstr(beef)\n\nThe result lists are as follow:\n\ninfo: basic information for this commodity\nd_rebase: price after dividing by its 2015 average then multiplied by 100\nd_weighted: price index after multiplying the re-based values with the share and weight that contribute to the final index.\n\n\n\nRepeat for all commodities\n\n# do it for all 47 series\nproducts &lt;- M2$description_short\nreslist &lt;- list()\n\nfor(i in 1:length(products)){\n  reslist[[i]] &lt;- compute_weighted_price(\n    d_price = dcwide,\n    d_weight = M2,\n    product = products[i]\n  )\n  # cat('processing product ', i, '\\n')\n}\n\nnames(reslist) &lt;- products\n\nNow put everything together. We extract the weighted series from all commodities, and put them in one matrix.\n\n# put together\nlist_weighted &lt;- purrr::map(reslist, function(x){x$d_weighted})\nmat_weighted &lt;- do.call(cbind, list_weighted)\n\nThe final index is the row-sum of all series. Note that for now we have removed all the missing values, but they can also be imputed with historical data.\n\nindex &lt;- apply(mat_weighted, 1, function(x)(sum(x, na.rm = T)))\nplot(index, type = 'l')"
  },
  {
    "objectID": "reports/price_quality_report.html",
    "href": "reports/price_quality_report.html",
    "title": "Quality Assurance: Commodity Prices",
    "section": "",
    "text": "This is the development version in HTML, later convert to word.docx\n\n\nSeries with caution\n\nBanana\nIn the metadata, there are three codes for banana\n\nif we use 080300.01, the old source is also WB. Can use directly\nin the old way to compile the price index, code 080300.03 is used, which comes from TR. This series is quite different from WB data.\nanother series 080300.02 also exists in WB\n\n\n\nRubber\nRubber has two codes in WB, RSS3 and TR\n\nRSS3 is available for all times\nTSR20 is available from 1999.1.1. The old source is using TSR20 in the price index computation\nWe can either impute the historical TSR20, or use RSS3 instead, should not create big difference.\n\n\n\nWool\nHistorical data: 510100.02, 510100.03 available from AWI\n\n510100.03 only from 2013. Fine wool\n510100.02 only available for very short period, can drop it\n\nNew source: IMF has PWOOLF (fine) and PWOOLC (coarse) for all times. For the comparison, 510100.03 is compared with PWOOLF. For the period where they both exist, seem to overlap quite well.\nFor the purpose of computing the index, use PWOOLF.\n\n\nHides\nNo comparison data, only IMF.\nAvailable for all times.\n\n\nJute\nJute only has one data source, which is FAO. No other historical data exists. Just use this for the computation.\nOnly available from 2004.\n\n\nManganese\nHistorical data:\nNew source: IMF, available from 2012.6.1\n\n\n\nGraphics\n\n\nAppendix 1\n\n\nAppendix 2\n\nlibrary(gt)\n\n# Define the start and end dates for the data range\nstart_date &lt;- \"2010-06-07\"\nend_date &lt;- \"2010-06-14\"\n\n# Create a gt table based on preprocessed\n# `sp500` table data\nsp500 |&gt;\n  dplyr::filter(date &gt;= start_date & date &lt;= end_date) |&gt;\n  dplyr::select(-adj_close) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"S&P 500\",\n    subtitle = glue::glue(\"{start_date} to {end_date}\")\n  ) |&gt;\n  fmt_currency() |&gt;\n  fmt_date(columns = date, date_style = \"wd_m_day_year\") |&gt;\n  fmt_number(columns = volume, suffixing = TRUE)"
  },
  {
    "objectID": "documentation/2_input_qa.html",
    "href": "documentation/2_input_qa.html",
    "title": "Quality Assurance: Commodity Prices",
    "section": "",
    "text": "This is the development version in HTML, later convert to word.docx\n\n\nSeries with caution\n\nBanana\nIn the metadata, there are three codes for banana\n\nif we use 080300.01, the old source is also WB. Can use directly\nin the old way to compile the price index, code 080300.03 is used, which comes from TR. This series is quite different from WB data.\nanother series 080300.02 also exists in WB\n\n\n\nRubber\nRubber has two codes in WB, RSS3 and TR\n\nRSS3 is available for all times\nTSR20 is available from 1999.1.1. The old source is using TSR20 in the price index computation\nWe can either impute the historical TSR20, or use RSS3 instead, should not create big difference.\n\n\n\nWool\nHistorical data: 510100.02, 510100.03 available from AWI\n\n510100.03 only from 2013. Fine wool\n510100.02 only available for very short period, can drop it\n\nNew source: IMF has PWOOLF (fine) and PWOOLC (coarse) for all times. For the comparison, 510100.03 is compared with PWOOLF. For the period where they both exist, seem to overlap quite well.\nFor the purpose of computing the index, use PWOOLF.\n\n\nHides\nNo comparison data, only IMF.\nAvailable for all times.\n\n\nJute\nJute only has one data source, which is FAO. No other historical data exists. Just use this for the computation.\nOnly available from 2004.\n\n\nManganese\nHistorical data:\nNew source: IMF, available from 2012.6.1\n\n\n\nGraphics\n\n\n\n\n\n\n\n\n\nProduct\nProduct ID\nData Source (2024)\nData Source (2025)\nValues matched?\nAvailability matched?\n\n\n\n\nfish_salmon\n030212.01\n7801\n2311\nGood\nGood\n\n\nbanana_us\n080300.01\n5110\n5110\nGood\nGood\n\n\ncoffee_arabica\n090100.03\n1901\n5110\nGood\nGood\n\n\ncoffee_robusta\n090100.05\n1901\n5110\nGood\nGood\n\n\nwheat_us\n100100.01\n6901\n5110\nGood\nGood\n\n\nmaize\n100500.02\n6901\n5110\nGood\nGood\n\n\nsugar\n170100.01\n2401\n5110\nGood\nGood\n\n\ncocoa\n180100.01\n1801\n5110\nGood\nGood\n\n\ntobacco\n240100.01\n4901\n5110\nGood\nGood\n\n\niron_ore\n260100.02\n7901\n5110\nGood\nPeriod difference\n\n\nmanganese_99\n260200.02\n6801\n2311\nGood\nPeriod difference\n\n\ncopper\n260300.01\n6801\n5110\nGood\nGood\n\n\nnickel\n260400.01\n6801\n5110\nGood\nGood\n\n\naluminium\n260600.01\n6801\n5110\nGood\nGood\n\n\nlead\n260700.02\n6801\n5110\nGood\nGood\n\n\nzinc\n260800.01\n6801\n5110\nGood\nGood\n\n\ntin\n260900.01\n6801\n5110\nGood\nGood\n\n\nsilver\n261600.01\n6801\n5110\nGood\nGood\n\n\ncoal\n270100.02\n7901\n5110\nGood\nGood\n\n\nrubber_rss3\n400100.02\n5110\n5110\nGood\nPeriod difference\n\n\nhides\n410100.01\n2311\n2311\nNo comparison\nNo comparison\n\n\nwool_fine\n510100.03\n8001\n2311\nGood\nPeriod difference\n\n\njute\n530300.01\n1603\n1603\nNo comparison\nNo comparison\n\n\ngold\n710800.01\n6801\n5110\nGood\nGood\n\n\nplatinum\n711000.01\n6801\n5110\nGood\nGood\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAppendix 1\n\n\n\n\n\n\n\n\n\nCode\nLabel\nLabel (short)\n\n\n\n\n1603\nFAO - Trade and Markets Division\nFAO\n\n\n1801\nInternational Cocoa Organization (ICCO)\nICCO\n\n\n1901\nInternational Coffee Organization (ICO)\nICO\n\n\n2311\nIMF - Primary Commodity Prices\nIMF\n\n\n2401\nInternational Sugar Organization (ISO)\nISO\n\n\n4901\nUnited States Department of Agriculture (USDA)\nUSDA\n\n\n5001\nU.S. Geological Survey (USGS)\nUSGS\n\n\n5110\nWorld Bank - Commodity-markets\nWorld Bank\n\n\n6701\nOil World, ISTA Mielke GmbH\nOilWorld\n\n\n6801\nMetal Bulletin Limited\nMetal Bulletin\n\n\n6901\nInternational Grains Council (IGC)\nIGC\n\n\n7001\nIEG Vu, Agribusiness intelligenge Informa\nIEG Vu\n\n\n7301\nHarland M. Braun & Co.\nHB\n\n\n7501\nInternational Tropical Timber Organization (ITTO)\nITTO\n\n\n7601\nOffice for National Statistics, UK (ONS)\nONS (UK)\n\n\n7801\nStatistics Norway\nSSB (Norway)\n\n\n7901\nThomson Reuters Eikon Database\nThomson Reuters\n\n\n8001\nAustralian Wool Innovation (AWI)\nAWI\n\n\n8101\nCotton Outlook\nCotton Outlook\n\n\n8201\nThe TEX Report\nTEX\n\n\n8301\nInternational Rubber Study Group (IRSG)\nIRSG\n\n\n\n\n\n\n\n\n\n\nAppendix 2"
  },
  {
    "objectID": "notes/todo_list.html",
    "href": "notes/todo_list.html",
    "title": "Price index compilation",
    "section": "",
    "text": "Price index compilation\n\nInput report\n\n\n\nInput validation"
  },
  {
    "objectID": "doc_un/4_softskills.html",
    "href": "doc_un/4_softskills.html",
    "title": "Soft skills",
    "section": "",
    "text": "Ways to speak\nTerminology to use"
  },
  {
    "objectID": "doc_un/index.html",
    "href": "doc_un/index.html",
    "title": "Documentation",
    "section": "",
    "text": "Project\n\n\n\n\n\nTitle\n\n\n\n\n\n\nProjects overview\n\n\n\n\nMethodology\n\n\n\n\nCommodity price replacements\n\n\n\n\n\nNo matching items\n\n\n\n\nBackground\n\n\n\n\n\nTitle\n\n\n\n\n\n\nAspects of interest\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "doc_un/x_interests.html",
    "href": "doc_un/x_interests.html",
    "title": "Aspects of interest",
    "section": "",
    "text": "A few projects that could be interesting to learn more about. Need to be an overlap between skills to develop and data available."
  },
  {
    "objectID": "doc_un/x_interests.html#commodity-prices",
    "href": "doc_un/x_interests.html#commodity-prices",
    "title": "Aspects of interest",
    "section": "Commodity prices",
    "text": "Commodity prices\nMonthly updated commodity prices using sources from World Bank, IMF.\nTo learn:\n\nNowcasting?\n\n\n\n\n\n\n\nSkills and impact\n\n\n\n\n\n\nResources\n\nInternational commodity bodies\nCommodities and development report 2023\n\n\nNowcasting\nTwo papers:\n\nEconomic Nowcasting with LSTM ANN\nBenchmarking econometric and machine learning methodologies in nowcasting\n\nDashboard\nDynamic factor models nowcastDFM"
  },
  {
    "objectID": "doc_un/x_interests.html#data-hub-api",
    "href": "doc_un/x_interests.html#data-hub-api",
    "title": "Aspects of interest",
    "section": "Data Hub API",
    "text": "Data Hub API\nThe data dashboard"
  },
  {
    "objectID": "doc_un/x_interests.html#visualization-palette-sdg",
    "href": "doc_un/x_interests.html#visualization-palette-sdg",
    "title": "Aspects of interest",
    "section": "Visualization palette (SDG)",
    "text": "Visualization palette (SDG)\nInspired by UNCTAD and UNHCR. (UNHCR has a few interesting packages!)"
  },
  {
    "objectID": "doc_un/x_interests.html#unctad-llm",
    "href": "doc_un/x_interests.html#unctad-llm",
    "title": "Aspects of interest",
    "section": "UNCTAD LLM",
    "text": "UNCTAD LLM\nUNCTAD internal system for RAG (retrieval-augmented generation)\nTo learn:\n\nLLM in general\nHow the app is set up\n\n\n\n\n\n\n\nSkills and impact"
  },
  {
    "objectID": "doc_un/x_interests.html#services",
    "href": "doc_un/x_interests.html#services",
    "title": "Aspects of interest",
    "section": "Services",
    "text": "Services\n\n\n\n\n\n\nSkills and impact"
  },
  {
    "objectID": "doc_un/1_project_overview.html",
    "href": "doc_un/1_project_overview.html",
    "title": "Projects overview",
    "section": "",
    "text": "Commodity dependence (over 60% of a country’s merchandise export revenue comes from these raw materials) hinders growth and development. This is due to the exposure to volatile commodity markets and global shocks such as Covid-19 and Ukraine War. If a country relies on a single commodity, the risk is worse.\n12% of advanced economies (such as Australia and Norway) are on the list, while 74% were some of the least developed countries.\nComodity price rose sharply during Covid-19 pandemic\nAction:\n\ndiversification towards sectors with high potential to create jobs and boost income\nalign education to the skills needed\ndiversify along low-emission paths"
  },
  {
    "objectID": "doc_un/1_project_overview.html#background",
    "href": "doc_un/1_project_overview.html#background",
    "title": "Projects overview",
    "section": "",
    "text": "Commodity dependence (over 60% of a country’s merchandise export revenue comes from these raw materials) hinders growth and development. This is due to the exposure to volatile commodity markets and global shocks such as Covid-19 and Ukraine War. If a country relies on a single commodity, the risk is worse.\n12% of advanced economies (such as Australia and Norway) are on the list, while 74% were some of the least developed countries.\nComodity price rose sharply during Covid-19 pandemic\nAction:\n\ndiversification towards sectors with high potential to create jobs and boost income\nalign education to the skills needed\ndiversify along low-emission paths"
  },
  {
    "objectID": "doc_un/1_project_overview.html#motivation",
    "href": "doc_un/1_project_overview.html#motivation",
    "title": "Projects overview",
    "section": "Motivation",
    "text": "Motivation\nStatistics on monthly and annual development of commodity prices ad CPI (UNCTAD CPI) are released. This is divided by commodity groups. Monthly update is made 2 months later; annual update made in February for preliminary version and October for final version."
  },
  {
    "objectID": "doc_un/2_method.html",
    "href": "doc_un/2_method.html",
    "title": "Methodology",
    "section": "",
    "text": "Resources: UNCTAD Commodity Price Index\nCPI: commodity price index: an index average (weighted) of selected commodity prices, which may be based on spot or future prices. It tracks a basket of commodities to measure their performance.\nCategories:\n\nenergy (coal, crude oil, ethanol, gas oil, gasoline, nature gas)\nmetals\n\nbase metals (lead, zinc, nickel, copper)\nprecious metals (gold, silver, platinum, palladium)\n\nagriculture\n\ngrains (corn, oats, rice, soybeans, wheat)\nsofts (coffee, cocoa, sugar, butter, cotton, milk)\nlivestock (hogs, live cattle, pork bellies, feeder cattle)\n\n\n\nWeights\nWeights determine how much importance each commodity have on the overall index\nDerived from UNSD Comtrade database.\n\n\nPrices\nDerived from a representative sample of monthly, weekly or daily spot-market quotations, in USD\nMany are published, but not all\n\\[L_{t,0}= \\frac{\\sum^n_{i=1} p_{i,t} q_{i,0}}{\\sum^n_{i=1} p_{i,0} q_{i,0}} = \\sum^n_{i=1} \\frac{p_i^t}{p_i^0} s_i^0\\]\n\n\\(s_i^0\\): weight of commodity item i\n\\(p_i^t\\): price in period t\n\\(q_i^0\\): quantity of commodity item i in the base period"
  },
  {
    "objectID": "doc_un/3_replacements.html",
    "href": "doc_un/3_replacements.html",
    "title": "Commodity price replacements",
    "section": "",
    "text": "Motivation: replace the commodity products from their original sources by equivalent items from World Bank (5110), IMF etc.\nAbbreviations:"
  },
  {
    "objectID": "doc_un/3_replacements.html#summary",
    "href": "doc_un/3_replacements.html#summary",
    "title": "Commodity price replacements",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\n\n\n\n\n\nName\nCode\nColumn in WB data\nAlternative source\nComment\n\n\n\n\nGold\n\n\nMB\nOK\n\n\nCopper\n\n\nMB\n260300.01 code has same trend but different values\n\n\nAluminium\n\n\nMB\nOK\n\n\nSilver\n\n\nMB\nOK, differ by 100 times\n\n\nNickel\n\n\nMB\nOK\n\n\nZinc\n\n\n\nOK\n\n\nPlatinum\n\nMB\n\nOK\n\n\nLead\n\n\nMB\nOK\n\n\nTin\n\n\nMB\nOK\n\n\nManganese\n\n\nMB\nNot available in WB\n\n\nIron\n260100.02, 03\n-\nTR\nTR Only available from 2010.9 for both. WB uses code 02, can directly replace."
  },
  {
    "objectID": "documentation/1_price_index.html",
    "href": "documentation/1_price_index.html",
    "title": "Documentation for the price index computation",
    "section": "",
    "text": "library(ggplot2)\nlibrary(openxlsx)\nlibrary(jsonlite)\nlibrary(httr)\nlibrary(readxl)\nlibrary(zoo)\nlibrary(dplyr)\n\n# source the utility functions\nsource('~/Documents/GitHub/un-commodity-prices/dev_prices/util.R')\n\n# set data paths\nread_path &lt;- '~/Documents/GitHub/un-commodity-prices/data-raw/'\ndir_metadata &lt;- 'metadata/'\ndir_datasource_2024 &lt;- 'datasource_2024/'\ndir_datasource_2025 &lt;- 'datasource_2025/'\n\n# write_path &lt;- '~/Documents/GitHub/unctad-int/dev_prices/results/'"
  },
  {
    "objectID": "documentation/1_price_index.html#metadata",
    "href": "documentation/1_price_index.html#metadata",
    "title": "Documentation for the price index computation",
    "section": "Metadata",
    "text": "Metadata\nFirst load the metadata that contains information for extracting the relevant columns from the international sources.\nThe content of metadata:\n\nindex_sort: 4-digits ID used to compute price index\nseries_id: 8 digits ID for specific commodity\ndescription_long: detailed description of commodity for 2024 sources\nunit_2024: unit used as in the description (2024 sources). This might not be the same as in the 2025 sources. add a footnote\ndata_source_2024_code, data_source_2024: code and description for data sources used in 2024 version. For example, 5110 is World Bank Commodity markets.\ndata_source_2025_code, data_source_2025: code and description for data sources used in 2025 version.\nlabel_display: commodity name, used for graphics\nlabel_source_2025: commodity name as in their 2025 data sources. It is important to match the correct names to the latest data. this step needs to be emphasized\ncheck_two_sources: indicator of whether the sources are switched from 2024 to 2025. If yes, then quality check graphics will be produced.\nkeep: indicator of whether we keep the series in the price index computation.\nwithin_product_weight: weight for products that share the same index_sort. For now only applies to coffee and oil. more info see index computation\n\n\nmetadata &lt;- read.xlsx(paste0(read_path, \n                             dir_metadata, \n                             'commodity_metadata.xlsx'), \n                      sheet = 'commodity')\nhead(metadata, 3)\n\n  index_sort series_id description_short\n1       1005 020100.01              beef\n2       1010 030212.01       fish_salmon\n3       1011 030613.01       shrimps_mex\n                                            description_long  unit_2024\n1   Beef, Australia/New Zealand, frozen, CIF US ports ($/kg) usd_per_kg\n2 Salmon, fresh, fish-farm bred, export price, Norway ($/kg) usd_per_kg\n3   Shrimps, brown, no. 1, shell-on, headless, Mexico ($/kg) usd_per_kg\n  data_source_2024_code               data_source_2024 data_source_2025_code\n1                  5110 World Bank - Commodity-markets                  5110\n2                  7801              Statistics Norway                  2311\n3                  5110 World Bank - Commodity-markets                  5110\n                data_source_2025     label_display label_source_2025\n1 World Bank - Commodity-markets              Beef           Beef.**\n2 IMF - Primary Commodity Prices     Fish (Salmon)             PSALM\n3 World Bank - Commodity-markets Shrimps (Mexican)  Shrimps..Mexican\n  check_two_sources keep within_product_weight\n1              &lt;NA&gt;  yes                     1\n2               yes  yes                     1\n3              &lt;NA&gt;  yes                     1"
  },
  {
    "objectID": "documentation/1_price_index.html#data-collection",
    "href": "documentation/1_price_index.html#data-collection",
    "title": "Documentation for the price index computation",
    "section": "Data collection",
    "text": "Data collection\n\nWorld Bank\nNote: data file needs to be replaced by API link!\nWe load the data first, then do some processing: convert the prices into numeric values.\n\n# load the raw data (to be replaced by API)\nwb_raw &lt;- read.xlsx(paste0(read_path, \n                           dir_datasource_2025, \n                           \"CMO-Historical-Data-Monthly.xlsx\"), \n                          sheet = \"Monthly Prices\", startRow = 5)\n\n# print the column names and location\nwb_var &lt;- get_info_wb(wb_raw)\n\n# make the values numeric\nwb &lt;- process_data_wb(data = wb_raw)\n\nNow select the relevant commodities, as defined by metadata. We choose the ones where data_source_2025_code == 5110 (world bank).\nSome of the labels might have special characters, hence we replace them.\n\nwb_info &lt;- filter(metadata, data_source_2025_code == 5110 & !is.na(label_source_2025))\n# double check if this is what we need\n\n# process the labels to remove the special characters\nwb_labels &lt;- wb_info$label_source_2025\nwb_labels &lt;- gsub(',', '.', wb_labels) # substitute the commas\nwb_labels &lt;- gsub('\\\\*', '.', wb_labels) # substitute the star (careful since it's wildcard)\nwb_labels &lt;- gsub('%', '.', wb_labels) # substitute the commas\nwb_labels\n\n [1] \"Beef...\"                 \"Shrimps..Mexican\"       \n [3] \"Banana..US\"              \"Coffee..Arabica\"        \n [5] \"Coffee..Robusta\"         \"Tea..Mombasa\"           \n [7] \"Wheat..US.HRW\"           \"Maize\"                  \n [9] \"Rice..Thai.5.\"           \"Soybeans\"               \n[11] \"Soybean.meal\"            \"Cotton..A.Index\"        \n[13] \"Soybean.oil\"             \"Groundnut.oil...\"       \n[15] \"Palm.oil\"                \"Sunflower.oil\"          \n[17] \"Coconut.oil\"             \"Palm.kernel.oil\"        \n[19] \"Sugar..world\"            \"Cocoa\"                  \n[21] \"Fish.meal\"               \"Tobacco..US.import.u.v.\"\n[23] \"Phosphate.rock\"          \"Iron.ore..cfr.spot\"     \n[25] \"Copper\"                  \"Nickel\"                 \n[27] \"Aluminum\"                \"Lead\"                   \n[29] \"Zinc\"                    \"Tin\"                    \n[31] \"Silver\"                  \"Coal..Australian\"       \n[33] \"Crude.oil..Brent\"        \"Crude.oil..Dubai\"       \n[35] \"Natural.gas.index\"       \"Rubber..TSR20...\"       \n[37] \"Rubber..RSS3\"            \"Logs..Cameroon\"         \n[39] \"Sawnwood..Malaysian\"     \"Plywood\"                \n[41] \"Gold\"                    \"Platinum\"               \n\n\nAbove are the variable names that correspond to the world bank data file. Now we carry out the selection: keep year, period, time, datetime and the commodity labels.\nSince some labels are long, we set new names.\n\n# select based on names\nwb_narrow &lt;- select(wb, year, period, time, datetime, all_of(wb_labels))\n\n# reset the colnames\ncolnames(wb_narrow)[5:ncol(wb_narrow)]\n\n [1] \"Beef...\"                 \"Shrimps..Mexican\"       \n [3] \"Banana..US\"              \"Coffee..Arabica\"        \n [5] \"Coffee..Robusta\"         \"Tea..Mombasa\"           \n [7] \"Wheat..US.HRW\"           \"Maize\"                  \n [9] \"Rice..Thai.5.\"           \"Soybeans\"               \n[11] \"Soybean.meal\"            \"Cotton..A.Index\"        \n[13] \"Soybean.oil\"             \"Groundnut.oil...\"       \n[15] \"Palm.oil\"                \"Sunflower.oil\"          \n[17] \"Coconut.oil\"             \"Palm.kernel.oil\"        \n[19] \"Sugar..world\"            \"Cocoa\"                  \n[21] \"Fish.meal\"               \"Tobacco..US.import.u.v.\"\n[23] \"Phosphate.rock\"          \"Iron.ore..cfr.spot\"     \n[25] \"Copper\"                  \"Nickel\"                 \n[27] \"Aluminum\"                \"Lead\"                   \n[29] \"Zinc\"                    \"Tin\"                    \n[31] \"Silver\"                  \"Coal..Australian\"       \n[33] \"Crude.oil..Brent\"        \"Crude.oil..Dubai\"       \n[35] \"Natural.gas.index\"       \"Rubber..TSR20...\"       \n[37] \"Rubber..RSS3\"            \"Logs..Cameroon\"         \n[39] \"Sawnwood..Malaysian\"     \"Plywood\"                \n[41] \"Gold\"                    \"Platinum\"               \n\ncolnames(wb_narrow)[5:ncol(wb_narrow)] &lt;- wb_info$description_short\n\n\n\nIMF\nCarry out similar tasks for the IMF data.\n\nimf_raw &lt;- read_excel(paste0(read_path, \n                             dir_datasource_2025, \n                             \"imf.xls\"))\n\nNew names:\n• `POILAPSP` -&gt; `POILAPSP...17`\n• `POILAPSP` -&gt; `POILAPSP...45`\n• `` -&gt; `...89`\n• `` -&gt; `...90`\n• `` -&gt; `...91`\n• `` -&gt; `...92`\n• `` -&gt; `...93`\n• `` -&gt; `...94`\n• `` -&gt; `...95`\n\n# check variables\nimf_var &lt;- get_info_imf(imf_raw)\n# View(imf_var)\n\n# process data, conver to numerics\nimf &lt;- process_data_imf(imf_raw)\n\nThe last few columns are a bit messy, we manually set the name for Manganese. Please double check if this is what you need!\n\n# need to fill in Manganese\nimf &lt;- fill_imf_name(data = imf, \n                     keyword = 'Mang', \n                     col_to_fill = '...92', \n                     fill_name = 'PMANG')\n\nSelect the variables defined in metadata: where data_source_2025_code == 2311.\n\n# select \nimf_info &lt;- filter(metadata, data_source_2025_code == 2311 & \n                     !is.na(label_source_2025) & keep == 'yes')\nimf_info\n\n  index_sort series_id description_short\n1       1010 030212.01       fish_salmon\n2       3002 260200.02      manganese_99\n3       2006 410100.01             hides\n4       2004 510100.03         wool_fine\n                                                                   description_long\n1                        Salmon, fresh, fish-farm bred, export price, Norway ($/kg)\n2     Manganese 99.7% electrolytic manganese flake, free market, in warehouse ($/t)\n3 Cattle hides, US Chicago packer's heavy native steers, FOB shipping point (¢/lb.)\n4                         Fine wool, 19 Micron, AWEX auction price, Australia ($/t)\n      unit_2024 data_source_2024_code                 data_source_2024\n1    usd_per_kg                  7801                Statistics Norway\n2 usd_per_tonne                  6801           Metal Bulletin Limited\n3   cent_per_lb                  2311   IMF - Primary Commodity Prices\n4 usd_per_tonne                  8001 Australian Wool Innovation (AWI)\n  data_source_2025_code               data_source_2025  label_display\n1                  2311 IMF - Primary Commodity Prices  Fish (Salmon)\n2                  2311 IMF - Primary Commodity Prices Manganese 99.7\n3                  2311 IMF - Primary Commodity Prices          Hides\n4                  2311 IMF - Primary Commodity Prices    Wool (fine)\n  label_source_2025 check_two_sources keep within_product_weight\n1             PSALM               yes  yes                     1\n2             PMANG               yes  yes                     1\n3             PHIDE               yes  yes                     1\n4            PWOOLF               yes  yes                     1\n\n# select relevant columns\nimf_narrow &lt;- select(imf, year, datetime, all_of(imf_info$label_source_2025))\n\n# reset name \ncolnames(imf_narrow)[3:ncol(imf_narrow)]\n\n[1] \"PSALM\"  \"PMANG\"  \"PHIDE\"  \"PWOOLF\"\n\ncolnames(imf_narrow)[3:ncol(imf_narrow)] &lt;- imf_info$description_short"
  },
  {
    "objectID": "documentation/1_price_index.html#fao",
    "href": "documentation/1_price_index.html#fao",
    "title": "Documentation for the price index computation",
    "section": "FAO",
    "text": "FAO\nThe mechanism is slightly different for FAO. First grab the name (Jute), then query it based on uuid.\n\n# first get metadata\nfpma_api &lt;- GET(\"https://fpma.fao.org/giews/v4/price_module/api/v1/FpmaSerieInternational/\")\nfpma_raw &lt;- fromJSON(rawToChar(fpma_api$content))\n# str(fpma_raw)\nfpma_data &lt;- fpma_raw$results\n\n# get information for jute\n# do the same for other commodity if needed\njute_info &lt;- filter(fpma_data, grepl('Jute', commodity_name))\njute_info\n\n                                  uuid iso3_country_code         country_name\n1 5a272e65-e437-41c2-bcb0-f229dc14f47b               IPS INTERNATIONAL PRICES\n                      periodicity market market_name market_info market_type\n1 monthly, 2024-04-01, 2004-01-01   1750  Bangladesh                  Export\n  admin_unit admin_unit2 commodity\n1                             2711\n                                                                 commodity_name\n1 Jute BWD (f.o.b. Mongla, at sight)/from 2006 Jute BTD (f.o.b Bangladesh Port)\n  commodity_info commodity_image commodity_code commodity_start_date\n1                             NA      CMM530300                    1\n  alternative_code alternative_name source\n1                                      323\n                                                                  source_name\n1 Bangladesh Jute Mills Corporation/The Public Ledger/Wilhelm G. Clasen (WGC)\n  source_url price_type_id price_type currency measure_unit measure_unit_label\n1                       11     EXPORT      USD         3555              tonne\n  conversion_factor\n1             0.001\n\n\nWe use the uuid to get the jute data. Double check the period where the data is available (it is only from 2004.1 to 2024.1).\n\njute_raw &lt;- GET(paste0(\"https://fpma.fao.org/giews/v4/price_module/api/v1/FpmaSeriePrice/\",jute_info$uuid,\"/\"))\njute &lt;- fromJSON(rawToChar(jute_raw$content))\n\n# only from 2004.1 to 2024.1\nhead(jute$datapoints)\n\n       id price_value price_value_real price_value_dollar conversion_factor\n1 5070349         840               NA                840             0.001\n2 5070348         780               NA                780             0.001\n3 5070347         820               NA                820             0.001\n4 5070346         850               NA                850             0.001\n5 5070345         700               NA                700             0.001\n6 5070344         670               NA                670             0.001\n        date periodicity\n1 2024-04-01     monthly\n2 2024-03-01     monthly\n3 2024-02-01     monthly\n4 2024-01-01     monthly\n5 2023-12-01     monthly\n6 2023-11-01     monthly\n\ntail(jute$datapoints)\n\n        id price_value price_value_real price_value_dollar conversion_factor\n239 612511         290               NA                290             0.001\n240 612510         290               NA                290             0.001\n241 612509         290               NA                290             0.001\n242 612508         245               NA                245             0.001\n243 612507         245               NA                245             0.001\n244 612506         230               NA                230             0.001\n          date periodicity\n239 2004-06-01     monthly\n240 2004-05-01     monthly\n241 2004-04-01     monthly\n242 2004-03-01     monthly\n243 2004-02-01     monthly\n244 2004-01-01     monthly\n\n\nConvert to proper format to prepare for merging.\n\njute &lt;- data.frame(jute$datapoints[, c('date', 'price_value_dollar')])\ncolnames(jute)[1] &lt;- 'datetime'\ncolnames(jute)[2] &lt;- 'jute'\njute$datetime &lt;- as.Date(jute$datetime)"
  },
  {
    "objectID": "documentation/1_price_index.html#merge",
    "href": "documentation/1_price_index.html#merge",
    "title": "Documentation for the price index computation",
    "section": "Merge",
    "text": "Merge\nWe carry out a left_join on the three data sets. The keywords that we join by are the date times.\n\ndcommodity &lt;- left_join(wb_narrow, imf_narrow) |&gt; \n  left_join(jute)\n\nJoining with `by = join_by(year, datetime)`\nJoining with `by = join_by(datetime)`\n\ncolnames(dcommodity)\n\n [1] \"year\"             \"period\"           \"time\"             \"datetime\"        \n [5] \"beef\"             \"shrimps_mex\"      \"banana_us\"        \"coffee_arabica\"  \n [9] \"coffee_robusta\"   \"tea_mombasa\"      \"wheat_us\"         \"maize\"           \n[13] \"rice\"             \"soybeans\"         \"soybean_meal\"     \"cotton\"          \n[17] \"soybean_oil\"      \"groundnut_oil\"    \"palm_oil\"         \"sunflower_oil\"   \n[21] \"coconut_oil\"      \"palmkernel_oil\"   \"sugar\"            \"cocoa\"           \n[25] \"fish_meal\"        \"tobacco\"          \"phosphate_rock\"   \"iron_ore\"        \n[29] \"copper\"           \"nickel\"           \"aluminium\"        \"lead\"            \n[33] \"zinc\"             \"tin\"              \"silver\"           \"coal\"            \n[37] \"crude_oil_brent\"  \"crude_oil_dubai\"  \"naturalgas_index\" \"rubber_tsr20\"    \n[41] \"rubber_rss3\"      \"logs_cameroon\"    \"sawnwood\"         \"plywood\"         \n[45] \"gold\"             \"platinum\"         \"fish_salmon\"      \"manganese_99\"    \n[49] \"hides\"            \"wool_fine\"        \"jute\""
  },
  {
    "objectID": "documentation/1_price_index.html#weights",
    "href": "documentation/1_price_index.html#weights",
    "title": "Documentation for the price index computation",
    "section": "Weights",
    "text": "Weights\n\nweights &lt;- read.xlsx(paste0(read_path, dir_metadata, 'weights.xlsx'))\nhead(weights)\n\n  index_sort    group subgroup index_description           w           s\n1       1001 ALL FOOD     FOOD             Wheat  2206573845 0.001966377\n2       1002 ALL FOOD     FOOD             Maize 10035445721 0.008943037\n3       1003 ALL FOOD     FOOD              Rice 12086634062 0.010770943\n4       1004 ALL FOOD     FOOD             Sugar 18309075031 0.016316040\n5       1005 ALL FOOD     FOOD       Bovine meat 10935950196 0.009745517\n6       1006 ALL FOOD     FOOD           Bananas  7314470514 0.006518253\n  available\n1       yes\n2       yes\n3       yes\n4       yes\n5       yes\n6       yes\n\n\nThe content of weight data:\n\nindex_sort: 4-digits ID used to compute price index. Link to metadata.\ngroup: first level of grouping of commodity\nsubgroup: second level of grouping\nindex_description: description of the index. This does not necessarily link to metadata; however it is indicative to the product used.\nw and s: numeric values used to compute the weighted sum of the index. s sum up to 1, while w for each product divided by the total sum of w equals to s (hence equivalent).\navailable: indicator of whether this product is available in the data source in 2025.\n\n\n# shares sum up to 1\nweights$s |&gt; sum()\n\n[1] 1"
  },
  {
    "objectID": "documentation/1_price_index.html#combine-weight-with-metadata",
    "href": "documentation/1_price_index.html#combine-weight-with-metadata",
    "title": "Documentation for the price index computation",
    "section": "Combine weight with metadata",
    "text": "Combine weight with metadata\nThis step produces a table that provides information that links price series to their weights.\n\nm &lt;- dplyr::filter(metadata, keep == 'yes') |&gt; \n  select(index_sort, \n         series_id, \n         description_short, \n         within_product_weight)\n\nm |&gt; head()\n\n  index_sort series_id description_short within_product_weight\n1       1005 020100.01              beef                   1.0\n2       1010 030212.01       fish_salmon                   1.0\n3       1011 030613.01       shrimps_mex                   1.0\n4       1006 080300.01         banana_us                   1.0\n5       1101 090100.03    coffee_arabica                   0.4\n6       1101 090100.05    coffee_robusta                   0.6\n\n\n\nws &lt;- dplyr::filter(weights, available == 'yes') |&gt; \n  select(index_sort, \n         group, \n         subgroup,\n         index_description,\n         s)\n\nws |&gt; head()\n\n  index_sort    group subgroup index_description           s\n1       1001 ALL FOOD     FOOD             Wheat 0.001966377\n2       1002 ALL FOOD     FOOD             Maize 0.008943037\n3       1003 ALL FOOD     FOOD              Rice 0.010770943\n4       1004 ALL FOOD     FOOD             Sugar 0.016316040\n5       1005 ALL FOOD     FOOD       Bovine meat 0.009745517\n6       1006 ALL FOOD     FOOD           Bananas 0.006518253"
  },
  {
    "objectID": "documentation/1_price_index.html#within-product-weights",
    "href": "documentation/1_price_index.html#within-product-weights",
    "title": "Documentation for the price index computation",
    "section": "Within product weights",
    "text": "Within product weights\nDouble check how many rows there are. They might be different.\n\nc(nrow(m), nrow(ws))\n\n[1] 47 44\n\n\nThe within-product weight is defined in the metadata. For most products this value is 1, exceptions apply to two products:\n\nindex sort code 1101: Coffee Arabica (090100.03) and Robusta (090100.05) takes up 40% and 60%\nindex sort code 4201: Crude oil - Brent (270900.01) and Dubai (270900.02) takes up 50% each\n\nSpecial case:\n\nindex sort code 2010: Rubber RSS3 (400100.02) and TSR20 (400100.01). We use RSS3 as it is complete, while TSR20 is only available from 1999 in World Bank Data. The within-product weight becomes 1 and 0 respectively.\n\n\n# only 1101 (coffee), 2010 (rubber) 4201 (crude oil) have more frequency\ntable(m$index_sort) |&gt; sort()\n\n\n1001 1002 1003 1004 1005 1006 1008 1010 1011 1102 1103 1201 1202 1203 1204 1206 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1207 1208 2001 2002 2003 2004 2005 2006 2007 2008 2009 3001 3002 3003 3004 3005 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n3006 3007 3008 3009 3101 3102 3103 4001 4101 1101 2010 4201 \n   1    1    1    1    1    1    1    1    1    2    2    2 \n\nM &lt;- full_join(m, ws, by = 'index_sort')\nhead(M)\n\n  index_sort series_id description_short within_product_weight    group\n1       1005 020100.01              beef                   1.0 ALL FOOD\n2       1010 030212.01       fish_salmon                   1.0 ALL FOOD\n3       1011 030613.01       shrimps_mex                   1.0 ALL FOOD\n4       1006 080300.01         banana_us                   1.0 ALL FOOD\n5       1101 090100.03    coffee_arabica                   0.4 ALL FOOD\n6       1101 090100.05    coffee_robusta                   0.6 ALL FOOD\n            subgroup index_description           s\n1               FOOD       Bovine meat 0.009745517\n2               FOOD              Fish 0.002242046\n3               FOOD       Crustaceans 0.010791602\n4               FOOD           Bananas 0.006518253\n5 TROPICAL BEVERAGES            Coffee 0.014538625\n6 TROPICAL BEVERAGES            Coffee 0.014538625"
  },
  {
    "objectID": "documentation/1_price_index.html#compute-index",
    "href": "documentation/1_price_index.html#compute-index",
    "title": "Documentation for the price index computation",
    "section": "Compute index",
    "text": "Compute index\nNow we compute the index. First need to base the prices at 2015 as 100: compute the average price for each product for 2015, and merge it back to M matrix. These 2015 basis values are used as the denominator when we compute the index.\n\nbasis_2015 &lt;- filter(dcommodity, year == 2015) |&gt; \n  select(-c(year, period, time, datetime)) |&gt; \n  apply(MARGIN = 2, mean) \nbasis_2015 &lt;- data.frame(basis_2015)\nbasis_2015$description_short &lt;- rownames(basis_2015)\nhead(basis_2015)\n\n               basis_2015 description_short\nbeef            4.5591542              beef\nshrimps_mex    13.2152272       shrimps_mex\nbanana_us       0.9569142         banana_us\ncoffee_arabica  3.5260692    coffee_arabica\ncoffee_robusta  1.9411679    coffee_robusta\ntea_mombasa     2.9646806       tea_mombasa\n\n# merge it to M\nM2 &lt;- left_join(M, basis_2015, by = 'description_short')\n\nNow we select the relevant columns (by dropping year, period, time, datetime).\n\n# select only relevant columns\ndcwide &lt;- select(dcommodity, -c(year, period, time, datetime))\n\n# still want to keep track of the time information\nrownames(dcwide) &lt;- dcommodity$datetime\n\nDivide the original values by the 2015 basis, then multiply by their weights. For the special cases (coffee, crude oil), the within_product_weight is used to combine the weighted sum of the two sub-products.\n\nTest out for one series\nLet us use beef as an example.\n\nproducts &lt;- M2$description_short\nproducts[1]\n\n\nbeef &lt;- compute_weighted_price(d_price = dcwide,\n                               d_weight = M2,\n                               product = products[1])\nstr(beef)\n\nThe result lists are as follow:\n\ninfo: basic information for this commodity\nd_rebase: price after dividing by its 2015 average then multiplied by 100\nd_weighted: price index after multiplying the re-based values with the share and weight that contribute to the final index.\n\n\n\nRepeat for all commodities\n\n# do it for all 47 series\nproducts &lt;- M2$description_short\nreslist &lt;- list()\n\nfor(i in 1:length(products)){\n  reslist[[i]] &lt;- compute_weighted_price(\n    d_price = dcwide,\n    d_weight = M2,\n    product = products[i]\n  )\n  # cat('processing product ', i, '\\n')\n}\n\nnames(reslist) &lt;- products\n\nNow put everything together. We extract the weighted series from all commodities, and put them in one matrix.\n\n# put together\nlist_weighted &lt;- purrr::map(reslist, function(x){x$d_weighted})\nmat_weighted &lt;- do.call(cbind, list_weighted)\n\nThe final index is the row-sum of all series. Note that for now we have removed all the missing values, but they can also be imputed with historical data.\n\nindex &lt;- apply(mat_weighted, 1, function(x)(sum(x, na.rm = T)))\nplot(index, type = 'l')"
  }
]